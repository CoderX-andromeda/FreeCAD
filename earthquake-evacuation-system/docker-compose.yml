version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: evacuation-postgres
    environment:
      POSTGRES_DB: evacuation_db
      POSTGRES_USER: evacuation_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - evacuation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evacuation_user -d evacuation_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: evacuation-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - evacuation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: evacuation-backend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://evacuation_user:secure_password@postgres:5432/evacuation_db
      - REDIS_URL=redis://redis:6379/0
      - USGS_API_URL=https://earthquake.usgs.gov/earthquakes/feed/v1.0
      - JWT_SECRET=your-super-secure-jwt-secret-key-here
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    networks:
      - evacuation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Emergency Management Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: evacuation-dashboard
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_REFRESH_INTERVAL=30000
    depends_on:
      - backend
    ports:
      - "3001:80"
    networks:
      - evacuation-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: evacuation-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - dashboard
    networks:
      - evacuation-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: evacuation-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - evacuation-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: evacuation-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - evacuation-network
    restart: unless-stopped

  # Log Aggregation - ELK Stack (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: evacuation-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - evacuation-network
    restart: unless-stopped

  # Log Processing - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: evacuation-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/logs
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - evacuation-network
    restart: unless-stopped

  # Log Visualization - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: evacuation-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - evacuation-network
    restart: unless-stopped

  # Message Queue - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: evacuation-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=evacuation
      - RABBITMQ_DEFAULT_PASS=secure_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    networks:
      - evacuation-network
    restart: unless-stopped

  # Background Workers
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: evacuation-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://evacuation_user:secure_password@postgres:5432/evacuation_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://evacuation:secure_password@rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./logs:/app/logs
    networks:
      - evacuation-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: evacuation-backup
    environment:
      - DATABASE_URL=postgresql://evacuation_user:secure_password@postgres:5432/evacuation_db
      - BACKUP_INTERVAL=3600
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./backups:/backups
      - postgres_data:/postgres_data:ro
    depends_on:
      - postgres
    networks:
      - evacuation-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  evacuation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16